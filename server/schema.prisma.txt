// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique @db.VarChar(50)
  password_hash String          @db.VarChar(255)
  email         String          @unique @db.VarChar(100)
  full_name     String          @db.VarChar(100)
  faculty       Faculty?        @relation(fields: [faculty_id], references: [id])
  faculty_id    Int?
  group         StudentGroup?   @relation(fields: [group_id], references: [id])
  group_id      Int?
  created_at    DateTime        @default(now())
  is_active     Boolean         @default(true)
  
  // Relations
  roles         UserRole[]
  faculties_dean Faculty[]       @relation("FacultyDean")
  groups_curator StudentGroup[]  @relation("GroupCurator")
  exams_teacher  Exam[]
  materials_uploaded StudyMaterial[]
  access_cards  AccessCard[]
  attendance    Attendance[]
  messages_sent Message[]
  applications  Application[]
  scholarships  Scholarship[]
  notifications Notification[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  userRoles UserRole[]
}

model UserRole {
  user_id Int
  role_id Int
  user    User   @relation(fields: [user_id], references: [id])
  role    Role   @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
}

model Faculty {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(100)
  dean      User           @relation("FacultyDean", fields: [dean_id], references: [id])
  dean_id   Int
  groups    StudentGroup[]
  subjects  Subject[]
  users     User[]
}

model StudentGroup {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50)
  faculty     Faculty      @relation(fields: [faculty_id], references: [id])
  faculty_id  Int
  curator     User         @relation("GroupCurator", fields: [curator_id], references: [id])
  curator_id  Int
  users       User[]
  schedules   Schedule[]
  messages    Message[]
}

model Subject {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(100)
  faculty     Faculty         @relation(fields: [faculty_id], references: [id])
  faculty_id  Int
  exams       Exam[]
  materials   StudyMaterial[]
  schedules   Schedule[]
}

model Exam {
  id          Int      @id @default(autoincrement())
  subject     Subject  @relation(fields: [subject_id], references: [id])
  subject_id  Int
  exam_date   DateTime
  teacher     User     @relation(fields: [teacher_id], references: [id])
  teacher_id  Int
  grades      Grade[]
}

model Grade {
  id        Int     @id @default(autoincrement())
  student   User    @relation(fields: [student_id], references: [id])
  student_id Int
  exam      Exam    @relation(fields: [exam_id], references: [id])
  exam_id   Int
  grade     Int?
  passed    Boolean @default(false)

  @@index([student_id])
  @@index([exam_id])
}

model StudyMaterial {
  id          Int      @id @default(autoincrement())
  subject     Subject  @relation(fields: [subject_id], references: [id])
  subject_id  Int
  title       String   @db.VarChar(255)
  file_path   String?  @db.VarChar(255)
  upload_date DateTime @default(now())
  uploaded_by User     @relation(fields: [uploaded_by_id], references: [id])
  uploaded_by_id Int
}

model AccessCard {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
  card_id     String    @unique @db.VarChar(50)
  valid_until DateTime
  is_active   Boolean   @default(true)
  access_logs AccessLog[]
}

model AccessLog {
  id          Int       @id @default(autoincrement())
  card        AccessCard? @relation(fields: [card_id], references: [card_id])
  card_id     String    @db.VarChar(50)
  access_time DateTime  @default(now())
  status      String    @db.VarChar(20)
}

model Attendance {
  id          Int       @id @default(autoincrement())
  student     User      @relation(fields: [student_id], references: [id])
  student_id  Int
  date        DateTime
  entry_time  DateTime?
  exit_time   DateTime?
  status      String    @default("Отсутствует") @db.VarChar(20)

  @@index([student_id, date], name: "idx_attendance_student_date")
}

model Message {
  id           Int           @id @default(autoincrement())
  sender       User          @relation("MessageSender", fields: [sender_id], references: [id])
  sender_id    Int
  recipient    User?         @relation("MessageRecipient", fields: [recipient_id], references: [id])
  recipient_id Int?
  group        StudentGroup? @relation(fields: [group_id], references: [id])
  group_id     Int?
  content      String
  sent_at      DateTime      @default(now())
  is_read      Boolean       @default(false)

  @@index([recipient_id], name: "idx_messages_recipient")
  @@index([group_id], name: "idx_messages_group")
}

model Schedule {
  id           Int      @id @default(autoincrement())
  subject      Subject  @relation(fields: [subject_id], references: [id])
  subject_id   Int
  group        StudentGroup @relation(fields: [group_id], references: [id])
  group_id     Int
  teacher      User     @relation(fields: [teacher_id], references: [id])
  teacher_id   Int
  room         String   @db.VarChar(20)
  day_of_week  Int
  start_time   DateTime
  end_time     DateTime
  is_even_week Boolean?
  valid_from   DateTime
  valid_until  DateTime?
}

model Application {
  id           Int       @id @default(autoincrement())
  applicant    User      @relation(fields: [applicant_id], references: [id])
  applicant_id Int
  type         String    @db.VarChar(50)
  status       String    @default("На рассмотрении") @db.VarChar(20)
  content      String?
  created_at   DateTime  @default(now())
  resolved_at  DateTime?
  resolved_by  User?     @relation(fields: [resolved_by_id], references: [id])
  resolved_by_id Int?
}

model Scholarship {
  id          Int       @id @default(autoincrement())
  student     User      @relation(fields: [student_id], references: [id])
  student_id  Int
  type        String    @db.VarChar(50)
  amount      Float     @db.Decimal(10, 2)
  start_date  DateTime
  end_date    DateTime?
  is_active   Boolean   @default(true)
  approved_by User?     @relation(fields: [approved_by_id], references: [id])
  approved_by_id Int?
}

model Notification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  title      String   @db.VarChar(100)
  message    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())

  @@index([user_id], name: "idx_notifications_unread")
}